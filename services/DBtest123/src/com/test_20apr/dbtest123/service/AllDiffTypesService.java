/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.dbtest123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.dbtest123.*;

/**
 * Service object for domain model class AllDiffTypes.
 * @see com.test_20apr.dbtest123.AllDiffTypes
 */

public interface AllDiffTypesService {
   /**
	 * Creates a new alldifftypes.
	 * 
	 * @param created
	 *            The information of the created alldifftypes.
	 * @return The created alldifftypes.
	 */
	public AllDiffTypes create(AllDiffTypes created);

	/**
	 * Deletes a alldifftypes.
	 * 
	 * @param alldifftypesId
	 *            The id of the deleted alldifftypes.
	 * @return The deleted alldifftypes.
	 * @throws EntityNotFoundException
	 *             if no alldifftypes is found with the given id.
	 */
	public AllDiffTypes delete(Integer alldifftypesId) throws EntityNotFoundException;

	/**
	 * Finds all alldifftypess.
	 * 
	 * @return A list of alldifftypess.
	 */
	public Page<AllDiffTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AllDiffTypes> findAll(Pageable pageable);
	
	/**
	 * Finds alldifftypes by id.
	 * 
	 * @param id
	 *            The id of the wanted alldifftypes.
	 * @return The found alldifftypes. If no alldifftypes is found, this method returns
	 *         null.
	 */
	public AllDiffTypes findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a alldifftypes.
	 * 
	 * @param updated
	 *            The information of the updated alldifftypes.
	 * @return The updated alldifftypes.
	 * @throws EntityNotFoundException
	 *             if no alldifftypes is found with given id.
	 */
	public AllDiffTypes update(AllDiffTypes updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the alldifftypess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the alldifftypes.
	 */

	public long countAll();


    public Page<AllDiffTypes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

