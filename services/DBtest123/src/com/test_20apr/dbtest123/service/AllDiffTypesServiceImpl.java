/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.dbtest123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.dbtest123.*;


/**
 * ServiceImpl object for domain model class AllDiffTypes.
 * @see com.test_20apr.dbtest123.AllDiffTypes
 */
@Service("DBtest123.AllDiffTypesService")
public class AllDiffTypesServiceImpl implements AllDiffTypesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AllDiffTypesServiceImpl.class);

    @Autowired
    @Qualifier("DBtest123.AllDiffTypesDao")
    private WMGenericDao<AllDiffTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllDiffTypes, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "DBtest123TransactionManager")
     public Page<AllDiffTypes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "DBtest123TransactionManager")
    @Override
    public AllDiffTypes create(AllDiffTypes alldifftypes) {
        LOGGER.debug("Creating a new alldifftypes with information: {}" , alldifftypes);
        return this.wmGenericDao.create(alldifftypes);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DBtest123TransactionManager")
    @Override
    public AllDiffTypes delete(Integer alldifftypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting alldifftypes with id: {}" , alldifftypesId);
        AllDiffTypes deleted = this.wmGenericDao.findById(alldifftypesId);
        if (deleted == null) {
            LOGGER.debug("No alldifftypes found with id: {}" , alldifftypesId);
            throw new EntityNotFoundException(String.valueOf(alldifftypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public Page<AllDiffTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all alldifftypess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public Page<AllDiffTypes> findAll(Pageable pageable) {
        LOGGER.debug("Finding all alldifftypess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public AllDiffTypes findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding alldifftypes by id: {}" , id);
        AllDiffTypes alldifftypes=this.wmGenericDao.findById(id);
        if(alldifftypes==null){
            LOGGER.debug("No alldifftypes found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return alldifftypes;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DBtest123TransactionManager")
    @Override
    public AllDiffTypes update(AllDiffTypes updated) throws EntityNotFoundException {
        LOGGER.debug("Updating alldifftypes with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


