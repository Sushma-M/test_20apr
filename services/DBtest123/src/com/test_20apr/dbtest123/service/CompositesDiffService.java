/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.dbtest123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.dbtest123.*;

/**
 * Service object for domain model class CompositesDiff.
 * @see com.test_20apr.dbtest123.CompositesDiff
 */

public interface CompositesDiffService {
   /**
	 * Creates a new compositesdiff.
	 * 
	 * @param created
	 *            The information of the created compositesdiff.
	 * @return The created compositesdiff.
	 */
	public CompositesDiff create(CompositesDiff created);

	/**
	 * Deletes a compositesdiff.
	 * 
	 * @param compositesdiffId
	 *            The id of the deleted compositesdiff.
	 * @return The deleted compositesdiff.
	 * @throws EntityNotFoundException
	 *             if no compositesdiff is found with the given id.
	 */
	public CompositesDiff delete(CompositesDiffId compositesdiffId) throws EntityNotFoundException;

	/**
	 * Finds all compositesdiffs.
	 * 
	 * @return A list of compositesdiffs.
	 */
	public Page<CompositesDiff> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<CompositesDiff> findAll(Pageable pageable);
	
	/**
	 * Finds compositesdiff by id.
	 * 
	 * @param id
	 *            The id of the wanted compositesdiff.
	 * @return The found compositesdiff. If no compositesdiff is found, this method returns
	 *         null.
	 */
	public CompositesDiff findById(CompositesDiffId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a compositesdiff.
	 * 
	 * @param updated
	 *            The information of the updated compositesdiff.
	 * @return The updated compositesdiff.
	 * @throws EntityNotFoundException
	 *             if no compositesdiff is found with given id.
	 */
	public CompositesDiff update(CompositesDiff updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the compositesdiffs in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the compositesdiff.
	 */

	public long countAll();


    public Page<CompositesDiff> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

