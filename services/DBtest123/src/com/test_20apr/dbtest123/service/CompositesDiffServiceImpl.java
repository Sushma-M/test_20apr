/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.dbtest123.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.dbtest123.*;


/**
 * ServiceImpl object for domain model class CompositesDiff.
 * @see com.test_20apr.dbtest123.CompositesDiff
 */
@Service("DBtest123.CompositesDiffService")
public class CompositesDiffServiceImpl implements CompositesDiffService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CompositesDiffServiceImpl.class);

    @Autowired
    @Qualifier("DBtest123.CompositesDiffDao")
    private WMGenericDao<CompositesDiff, CompositesDiffId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositesDiff, CompositesDiffId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "DBtest123TransactionManager")
     public Page<CompositesDiff> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "DBtest123TransactionManager")
    @Override
    public CompositesDiff create(CompositesDiff compositesdiff) {
        LOGGER.debug("Creating a new compositesdiff with information: {}" , compositesdiff);
        return this.wmGenericDao.create(compositesdiff);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DBtest123TransactionManager")
    @Override
    public CompositesDiff delete(CompositesDiffId compositesdiffId) throws EntityNotFoundException {
        LOGGER.debug("Deleting compositesdiff with id: {}" , compositesdiffId);
        CompositesDiff deleted = this.wmGenericDao.findById(compositesdiffId);
        if (deleted == null) {
            LOGGER.debug("No compositesdiff found with id: {}" , compositesdiffId);
            throw new EntityNotFoundException(String.valueOf(compositesdiffId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public Page<CompositesDiff> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all compositesdiffs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public Page<CompositesDiff> findAll(Pageable pageable) {
        LOGGER.debug("Finding all compositesdiffs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public CompositesDiff findById(CompositesDiffId id) throws EntityNotFoundException {
        LOGGER.debug("Finding compositesdiff by id: {}" , id);
        CompositesDiff compositesdiff=this.wmGenericDao.findById(id);
        if(compositesdiff==null){
            LOGGER.debug("No compositesdiff found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return compositesdiff;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DBtest123TransactionManager")
    @Override
    public CompositesDiff update(CompositesDiff updated) throws EntityNotFoundException {
        LOGGER.debug("Updating compositesdiff with information: {}" , updated);
        this.wmGenericDao.update(updated);

        CompositesDiffId id = new CompositesDiffId();
        id.setDate1(updated.getDate1());
        id.setTimestamp2(updated.getTimestamp2());
        id.setDatetime2(updated.getDatetime2());
        id.setTime2(updated.getTime2());
        id.setId(updated.getId());
        id.setColumn7(updated.getColumn7());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "DBtest123TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


