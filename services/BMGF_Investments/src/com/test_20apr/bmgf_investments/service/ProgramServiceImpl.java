/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments.*;


/**
 * ServiceImpl object for domain model class Program.
 * @see com.test_20apr.bmgf_investments.Program
 */
@Service("BMGF_Investments.ProgramService")
public class ProgramServiceImpl implements ProgramService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ProgramServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments.ProgramDao")
    private WMGenericDao<Program, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Program, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
     public Page<Program> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Program create(Program program) {
        LOGGER.debug("Creating a new program with information: {}" , program);
        return this.wmGenericDao.create(program);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Program delete(String programId) throws EntityNotFoundException {
        LOGGER.debug("Deleting program with id: {}" , programId);
        Program deleted = this.wmGenericDao.findById(programId);
        if (deleted == null) {
            LOGGER.debug("No program found with id: {}" , programId);
            throw new EntityNotFoundException(String.valueOf(programId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<Program> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all programs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<Program> findAll(Pageable pageable) {
        LOGGER.debug("Finding all programs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Program findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding program by id: {}" , id);
        Program program=this.wmGenericDao.findById(id);
        if(program==null){
            LOGGER.debug("No program found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return program;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Program update(Program updated) throws EntityNotFoundException {
        LOGGER.debug("Updating program with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getProgramId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


