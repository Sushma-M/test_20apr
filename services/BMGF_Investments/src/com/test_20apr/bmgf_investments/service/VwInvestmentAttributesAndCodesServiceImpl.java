/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments.*;


/**
 * ServiceImpl object for domain model class VwInvestmentAttributesAndCodes.
 * @see com.test_20apr.bmgf_investments.VwInvestmentAttributesAndCodes
 */
@Service("BMGF_Investments.VwInvestmentAttributesAndCodesService")
public class VwInvestmentAttributesAndCodesServiceImpl implements VwInvestmentAttributesAndCodesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(VwInvestmentAttributesAndCodesServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments.VwInvestmentAttributesAndCodesDao")
    private WMGenericDao<VwInvestmentAttributesAndCodes, VwInvestmentAttributesAndCodesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VwInvestmentAttributesAndCodes, VwInvestmentAttributesAndCodesId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
     public Page<VwInvestmentAttributesAndCodes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }


    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<VwInvestmentAttributesAndCodes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all vwinvestmentattributesandcodess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<VwInvestmentAttributesAndCodes> findAll(Pageable pageable) {
        LOGGER.debug("Finding all vwinvestmentattributesandcodess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public VwInvestmentAttributesAndCodes findById(VwInvestmentAttributesAndCodesId id) throws EntityNotFoundException {
        LOGGER.debug("Finding vwinvestmentattributesandcodes by id: {}" , id);
        VwInvestmentAttributesAndCodes vwinvestmentattributesandcodes=this.wmGenericDao.findById(id);
        if(vwinvestmentattributesandcodes==null){
            LOGGER.debug("No vwinvestmentattributesandcodes found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return vwinvestmentattributesandcodes;
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


