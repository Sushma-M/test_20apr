/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments.*;


/**
 * ServiceImpl object for domain model class AttributeGroup.
 * @see com.test_20apr.bmgf_investments.AttributeGroup
 */
@Service("BMGF_Investments.AttributeGroupService")
public class AttributeGroupServiceImpl implements AttributeGroupService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AttributeGroupServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments.AttributeGroupDao")
    private WMGenericDao<AttributeGroup, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AttributeGroup, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
     public Page<AttributeGroup> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BMGF_InvestmentsTransactionManager")
    @Override
    public AttributeGroup create(AttributeGroup attributegroup) {
        LOGGER.debug("Creating a new attributegroup with information: {}" , attributegroup);
        return this.wmGenericDao.create(attributegroup);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public AttributeGroup delete(String attributegroupId) throws EntityNotFoundException {
        LOGGER.debug("Deleting attributegroup with id: {}" , attributegroupId);
        AttributeGroup deleted = this.wmGenericDao.findById(attributegroupId);
        if (deleted == null) {
            LOGGER.debug("No attributegroup found with id: {}" , attributegroupId);
            throw new EntityNotFoundException(String.valueOf(attributegroupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<AttributeGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all attributegroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<AttributeGroup> findAll(Pageable pageable) {
        LOGGER.debug("Finding all attributegroups");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public AttributeGroup findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding attributegroup by id: {}" , id);
        AttributeGroup attributegroup=this.wmGenericDao.findById(id);
        if(attributegroup==null){
            LOGGER.debug("No attributegroup found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return attributegroup;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public AttributeGroup update(AttributeGroup updated) throws EntityNotFoundException {
        LOGGER.debug("Updating attributegroup with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getAttributeGroupId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


