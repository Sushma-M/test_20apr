/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments.*;


/**
 * ServiceImpl object for domain model class Initiative.
 * @see com.test_20apr.bmgf_investments.Initiative
 */
@Service("BMGF_Investments.InitiativeService")
public class InitiativeServiceImpl implements InitiativeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(InitiativeServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments.InitiativeDao")
    private WMGenericDao<Initiative, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Initiative, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
     public Page<Initiative> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Initiative create(Initiative initiative) {
        LOGGER.debug("Creating a new initiative with information: {}" , initiative);
        return this.wmGenericDao.create(initiative);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Initiative delete(String initiativeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting initiative with id: {}" , initiativeId);
        Initiative deleted = this.wmGenericDao.findById(initiativeId);
        if (deleted == null) {
            LOGGER.debug("No initiative found with id: {}" , initiativeId);
            throw new EntityNotFoundException(String.valueOf(initiativeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<Initiative> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all initiatives");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Page<Initiative> findAll(Pageable pageable) {
        LOGGER.debug("Finding all initiatives");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Initiative findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding initiative by id: {}" , id);
        Initiative initiative=this.wmGenericDao.findById(id);
        if(initiative==null){
            LOGGER.debug("No initiative found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return initiative;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public Initiative update(Initiative updated) throws EntityNotFoundException {
        LOGGER.debug("Updating initiative with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getInitiativeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BMGF_InvestmentsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


