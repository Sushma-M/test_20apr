/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments.*;

/**
 * Service object for domain model class AttributeGroup.
 * @see com.test_20apr.bmgf_investments.AttributeGroup
 */

public interface AttributeGroupService {
   /**
	 * Creates a new attributegroup.
	 * 
	 * @param created
	 *            The information of the created attributegroup.
	 * @return The created attributegroup.
	 */
	public AttributeGroup create(AttributeGroup created);

	/**
	 * Deletes a attributegroup.
	 * 
	 * @param attributegroupId
	 *            The id of the deleted attributegroup.
	 * @return The deleted attributegroup.
	 * @throws EntityNotFoundException
	 *             if no attributegroup is found with the given id.
	 */
	public AttributeGroup delete(String attributegroupId) throws EntityNotFoundException;

	/**
	 * Finds all attributegroups.
	 * 
	 * @return A list of attributegroups.
	 */
	public Page<AttributeGroup> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AttributeGroup> findAll(Pageable pageable);
	
	/**
	 * Finds attributegroup by id.
	 * 
	 * @param id
	 *            The id of the wanted attributegroup.
	 * @return The found attributegroup. If no attributegroup is found, this method returns
	 *         null.
	 */
	public AttributeGroup findById(String id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a attributegroup.
	 * 
	 * @param updated
	 *            The information of the updated attributegroup.
	 * @return The updated attributegroup.
	 * @throws EntityNotFoundException
	 *             if no attributegroup is found with given id.
	 */
	public AttributeGroup update(AttributeGroup updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the attributegroups in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the attributegroup.
	 */

	public long countAll();


    public Page<AttributeGroup> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

