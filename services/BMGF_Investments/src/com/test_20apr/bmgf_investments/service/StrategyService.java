/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments.*;

/**
 * Service object for domain model class Strategy.
 * @see com.test_20apr.bmgf_investments.Strategy
 */

public interface StrategyService {
   /**
	 * Creates a new strategy.
	 * 
	 * @param created
	 *            The information of the created strategy.
	 * @return The created strategy.
	 */
	public Strategy create(Strategy created);

	/**
	 * Deletes a strategy.
	 * 
	 * @param strategyId
	 *            The id of the deleted strategy.
	 * @return The deleted strategy.
	 * @throws EntityNotFoundException
	 *             if no strategy is found with the given id.
	 */
	public Strategy delete(String strategyId) throws EntityNotFoundException;

	/**
	 * Finds all strategys.
	 * 
	 * @return A list of strategys.
	 */
	public Page<Strategy> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Strategy> findAll(Pageable pageable);
	
	/**
	 * Finds strategy by id.
	 * 
	 * @param id
	 *            The id of the wanted strategy.
	 * @return The found strategy. If no strategy is found, this method returns
	 *         null.
	 */
	public Strategy findById(String id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a strategy.
	 * 
	 * @param updated
	 *            The information of the updated strategy.
	 * @return The updated strategy.
	 * @throws EntityNotFoundException
	 *             if no strategy is found with given id.
	 */
	public Strategy update(Strategy updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the strategys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the strategy.
	 */

	public long countAll();


    public Page<Strategy> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

