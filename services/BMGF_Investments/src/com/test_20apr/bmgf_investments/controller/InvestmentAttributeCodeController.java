/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.test_20apr.bmgf_investments.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_20apr.bmgf_investments.service.InvestmentAttributeCodeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.test_20apr.bmgf_investments.*;
import com.test_20apr.bmgf_investments.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class InvestmentAttributeCode.
 * @see com.test_20apr.bmgf_investments.InvestmentAttributeCode
 */
@RestController(value = "BMGF_Investments.InvestmentAttributeCodeController")
@RequestMapping("/BMGF_Investments/InvestmentAttributeCode")
@Api(description = "Exposes APIs to work with InvestmentAttributeCode resource.", value = "InvestmentAttributeCodeController")
public class InvestmentAttributeCodeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InvestmentAttributeCodeController.class);

    @Autowired
    @Qualifier("BMGF_Investments.InvestmentAttributeCodeService")
    private InvestmentAttributeCodeService investmentAttributeCodeService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of InvestmentAttributeCode instances matching the search criteria.")
    public Page<InvestmentAttributeCode> findInvestmentAttributeCodes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InvestmentAttributeCodes list");
        return investmentAttributeCodeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of InvestmentAttributeCode instances.")
    public Page<InvestmentAttributeCode> getInvestmentAttributeCodes(Pageable pageable) {
        LOGGER.debug("Rendering InvestmentAttributeCodes list");
        return investmentAttributeCodeService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setInvestmentAttributeCodeService(InvestmentAttributeCodeService service) {
        this.investmentAttributeCodeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new InvestmentAttributeCode instance.")
    public InvestmentAttributeCode createInvestmentAttributeCode(@RequestBody InvestmentAttributeCode instance) {
        LOGGER.debug("Create InvestmentAttributeCode with information: {}", instance);
        instance = investmentAttributeCodeService.create(instance);
        LOGGER.debug("Created InvestmentAttributeCode with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of InvestmentAttributeCode instances.")
    public Long countAllInvestmentAttributeCodes() {
        LOGGER.debug("counting InvestmentAttributeCodes");
        Long count = investmentAttributeCodeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the InvestmentAttributeCode instance associated with the given id.")
    public InvestmentAttributeCode getInvestmentAttributeCode(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting InvestmentAttributeCode with id: {}", id);
        InvestmentAttributeCode instance = investmentAttributeCodeService.findById(id);
        LOGGER.debug("InvestmentAttributeCode details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the InvestmentAttributeCode instance associated with the given id.")
    public InvestmentAttributeCode editInvestmentAttributeCode(@PathVariable(value = "id") String id, @RequestBody InvestmentAttributeCode instance) throws EntityNotFoundException {
        LOGGER.debug("Editing InvestmentAttributeCode with id: {}", instance.getInvestmentAttributeCodeId());
        instance.setInvestmentAttributeCodeId(id);
        instance = investmentAttributeCodeService.update(instance);
        LOGGER.debug("InvestmentAttributeCode details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the InvestmentAttributeCode instance associated with the given id.")
    public boolean deleteInvestmentAttributeCode(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InvestmentAttributeCode with id: {}", id);
        InvestmentAttributeCode deleted = investmentAttributeCodeService.delete(id);
        return deleted != null;
    }
}
