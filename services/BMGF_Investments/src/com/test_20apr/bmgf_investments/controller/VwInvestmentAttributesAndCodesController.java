/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_20apr.bmgf_investments.service.VwInvestmentAttributesAndCodesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_20apr.bmgf_investments.*;
import com.test_20apr.bmgf_investments.service.*;


/**
 * Controller object for domain model class VwInvestmentAttributesAndCodes.
 * @see com.test_20apr.bmgf_investments.VwInvestmentAttributesAndCodes
 */

@RestController(value = "BMGF_Investments.VwInvestmentAttributesAndCodesController")
@Api(value = "/BMGF_Investments/VwInvestmentAttributesAndCodes", description = "Exposes APIs to work with VwInvestmentAttributesAndCodes resource.")
@RequestMapping("/BMGF_Investments/VwInvestmentAttributesAndCodes")
public class VwInvestmentAttributesAndCodesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwInvestmentAttributesAndCodesController.class);

	@Autowired
	@Qualifier("BMGF_Investments.VwInvestmentAttributesAndCodesService")
	private VwInvestmentAttributesAndCodesService vwInvestmentAttributesAndCodesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of VwInvestmentAttributesAndCodes instances matching the search criteria.")
	public Page<VwInvestmentAttributesAndCodes> findVwInvestmentAttributesAndCodess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VwInvestmentAttributesAndCodess list");
		return vwInvestmentAttributesAndCodesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of VwInvestmentAttributesAndCodes instances.")
	public Page<VwInvestmentAttributesAndCodes> getVwInvestmentAttributesAndCodess(Pageable pageable) {
		LOGGER.debug("Rendering VwInvestmentAttributesAndCodess list");
		return vwInvestmentAttributesAndCodesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of VwInvestmentAttributesAndCodes instances.")
	public Long countAllVwInvestmentAttributesAndCodess() {
		LOGGER.debug("counting VwInvestmentAttributesAndCodess");
		Long count = vwInvestmentAttributesAndCodesService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the VwInvestmentAttributesAndCodes instance associated with the given composite-id.")
	public VwInvestmentAttributesAndCodes getVwInvestmentAttributesAndCodes( @RequestParam("investmentId") String investmentId, @RequestParam("investmentName") String investmentName, @RequestParam("programId") String programId, @RequestParam("programName") String programName, @RequestParam("strategyId") String strategyId, @RequestParam("strategyName") String strategyName, @RequestParam("initiativeId") String initiativeId, @RequestParam("initiativeName") String initiativeName, @RequestParam("subInitiativeId") String subInitiativeId, @RequestParam("subInitiativeName") String subInitiativeName, @RequestParam("keyElementId") String keyElementId, @RequestParam("keyElementName") String keyElementName, @RequestParam("statusId") String statusId, @RequestParam("statusDescription") String statusDescription, @RequestParam("investmentAttributeId") String investmentAttributeId, @RequestParam("attributeCategoryId") String attributeCategoryId, @RequestParam("categoryName") String categoryName, @RequestParam("attributeGroupId") String attributeGroupId, @RequestParam("groupingName") String groupingName, @RequestParam("investmentAttributeCodeId") String investmentAttributeCodeId, @RequestParam("attributeName") String attributeName, @RequestParam("distributionPercent") Float distributionPercent)
	 throws EntityNotFoundException {
	    VwInvestmentAttributesAndCodesId temp = new VwInvestmentAttributesAndCodesId();
	    temp.setInvestmentId(investmentId);
	    temp.setInvestmentName(investmentName);
	    temp.setProgramId(programId);
	    temp.setProgramName(programName);
	    temp.setStrategyId(strategyId);
	    temp.setStrategyName(strategyName);
	    temp.setInitiativeId(initiativeId);
	    temp.setInitiativeName(initiativeName);
	    temp.setSubInitiativeId(subInitiativeId);
	    temp.setSubInitiativeName(subInitiativeName);
	    temp.setKeyElementId(keyElementId);
	    temp.setKeyElementName(keyElementName);
	    temp.setStatusId(statusId);
	    temp.setStatusDescription(statusDescription);
	    temp.setInvestmentAttributeId(investmentAttributeId);
	    temp.setAttributeCategoryId(attributeCategoryId);
	    temp.setCategoryName(categoryName);
	    temp.setAttributeGroupId(attributeGroupId);
	    temp.setGroupingName(groupingName);
	    temp.setInvestmentAttributeCodeId(investmentAttributeCodeId);
	    temp.setAttributeName(attributeName);
	    temp.setDistributionPercent(distributionPercent);
		LOGGER.debug("Getting VwInvestmentAttributesAndCodes with id: {}" , temp);
		VwInvestmentAttributesAndCodes instance = vwInvestmentAttributesAndCodesService.findById(temp);
		LOGGER.debug("VwInvestmentAttributesAndCodes details with id: {}" , instance);
		return instance;
	}


	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVwInvestmentAttributesAndCodesService(VwInvestmentAttributesAndCodesService service) {
		this.vwInvestmentAttributesAndCodesService = service;
	}
}

