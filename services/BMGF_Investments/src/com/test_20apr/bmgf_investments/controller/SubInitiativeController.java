/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_20apr.bmgf_investments.service.InvestmentService;
import com.test_20apr.bmgf_investments.service.KeyElementService;
import com.test_20apr.bmgf_investments.service.SubInitiativeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_20apr.bmgf_investments.*;
import com.test_20apr.bmgf_investments.service.*;


/**
 * Controller object for domain model class SubInitiative.
 * @see com.test_20apr.bmgf_investments.SubInitiative
 */

@RestController(value = "BMGF_Investments.SubInitiativeController")
@Api(value = "/BMGF_Investments/SubInitiative", description = "Exposes APIs to work with SubInitiative resource.")
@RequestMapping("/BMGF_Investments/SubInitiative")
public class SubInitiativeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubInitiativeController.class);

	@Autowired
	@Qualifier("BMGF_Investments.SubInitiativeService")
	private SubInitiativeService subInitiativeService;


    @Autowired
    @Qualifier("BMGF_Investments.InvestmentService")
    private InvestmentService investmentService;


    @Autowired
    @Qualifier("BMGF_Investments.KeyElementService")
    private KeyElementService keyElementService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of SubInitiative instances matching the search criteria.")
	public Page<SubInitiative> findSubInitiatives( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering SubInitiatives list");
		return subInitiativeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of SubInitiative instances.")
	public Page<SubInitiative> getSubInitiatives(Pageable pageable) {
		LOGGER.debug("Rendering SubInitiatives list");
		return subInitiativeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of SubInitiative instances.")
	public Long countAllSubInitiatives() {
		LOGGER.debug("counting SubInitiatives");
		Long count = subInitiativeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the SubInitiative instance associated with the given id.")
    public SubInitiative getSubInitiative(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting SubInitiative with id: {}" , id);
        SubInitiative instance = subInitiativeService.findById(id);
        LOGGER.debug("SubInitiative details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the SubInitiative instance associated with the given id.")
    public boolean deleteSubInitiative(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SubInitiative with id: {}" , id);
        SubInitiative deleted = subInitiativeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the SubInitiative instance associated with the given id.")
    public SubInitiative editSubInitiative(@PathVariable("id") String id, @RequestBody SubInitiative instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SubInitiative with id: {}" , instance.getSubInitiativeId());
        instance.setSubInitiativeId(id);
        instance = subInitiativeService.update(instance);
        LOGGER.debug("SubInitiative details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/investments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the investments instance associated with the given id.")
     public Page<Investment> findAssociatedinvestments(Pageable pageable, @PathVariable("id") String id){
        LOGGER.debug("Fetching all associated investments");
        return investmentService.findAssociatedValues(id,"subInitiative","subInitiativeId", pageable);
   }

    @RequestMapping(value="/{id:.+}/keyElements", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the keyElements instance associated with the given id.")
     public Page<KeyElement> findAssociatedkeyElements(Pageable pageable, @PathVariable("id") String id){
        LOGGER.debug("Fetching all associated keyElements");
        return keyElementService.findAssociatedValues(id,"subInitiative","subInitiativeId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new SubInitiative instance.")
	public SubInitiative createSubInitiative(@RequestBody SubInitiative instance) {
		LOGGER.debug("Create SubInitiative with information: {}" , instance);
		instance = subInitiativeService.create(instance);
		LOGGER.debug("Created SubInitiative with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setSubInitiativeService(SubInitiativeService service) {
		this.subInitiativeService = service;
	}
}

