/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_20apr.bmgf_investments.service.VwInvestmentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_20apr.bmgf_investments.*;
import com.test_20apr.bmgf_investments.service.*;


/**
 * Controller object for domain model class VwInvestment.
 * @see com.test_20apr.bmgf_investments.VwInvestment
 */

@RestController(value = "BMGF_Investments.VwInvestmentController")
@Api(value = "/BMGF_Investments/VwInvestment", description = "Exposes APIs to work with VwInvestment resource.")
@RequestMapping("/BMGF_Investments/VwInvestment")
public class VwInvestmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwInvestmentController.class);

	@Autowired
	@Qualifier("BMGF_Investments.VwInvestmentService")
	private VwInvestmentService vwInvestmentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of VwInvestment instances matching the search criteria.")
	public Page<VwInvestment> findVwInvestments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VwInvestments list");
		return vwInvestmentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of VwInvestment instances.")
	public Page<VwInvestment> getVwInvestments(Pageable pageable) {
		LOGGER.debug("Rendering VwInvestments list");
		return vwInvestmentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of VwInvestment instances.")
	public Long countAllVwInvestments() {
		LOGGER.debug("counting VwInvestments");
		Long count = vwInvestmentService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the VwInvestment instance associated with the given composite-id.")
	public VwInvestment getVwInvestment( @RequestParam("investmentId") Integer investmentId, @RequestParam("investmentName") String investmentName, @RequestParam("programId") Integer programId, @RequestParam("programName") String programName, @RequestParam("strategyId") Integer strategyId, @RequestParam("strategyName") String strategyName, @RequestParam("initiativeId") Integer initiativeId, @RequestParam("initiativeName") String initiativeName, @RequestParam("subInitiativeId") Integer subInitiativeId, @RequestParam("subInitiativeName") String subInitiativeName, @RequestParam("keyElementId") Integer keyElementId, @RequestParam("keyElementName") String keyElementName, @RequestParam("statusId") Integer statusId, @RequestParam("statusDescription") String statusDescription, @RequestParam("notes") String notes)
	 throws EntityNotFoundException {
	    VwInvestmentId temp = new VwInvestmentId();
	    temp.setInvestmentId(investmentId);
	    temp.setInvestmentName(investmentName);
	    temp.setProgramId(programId);
	    temp.setProgramName(programName);
	    temp.setStrategyId(strategyId);
	    temp.setStrategyName(strategyName);
	    temp.setInitiativeId(initiativeId);
	    temp.setInitiativeName(initiativeName);
	    temp.setSubInitiativeId(subInitiativeId);
	    temp.setSubInitiativeName(subInitiativeName);
	    temp.setKeyElementId(keyElementId);
	    temp.setKeyElementName(keyElementName);
	    temp.setStatusId(statusId);
	    temp.setStatusDescription(statusDescription);
	    temp.setNotes(notes);
		LOGGER.debug("Getting VwInvestment with id: {}" , temp);
		VwInvestment instance = vwInvestmentService.findById(temp);
		LOGGER.debug("VwInvestment details with id: {}" , instance);
		return instance;
	}


	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVwInvestmentService(VwInvestmentService service) {
		this.vwInvestmentService = service;
	}
}

