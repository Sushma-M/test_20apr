/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_20apr.bmgf_investments.service.AttributeCategoryCodeService;
import com.test_20apr.bmgf_investments.service.InvestmentAttributeCodeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_20apr.bmgf_investments.*;
import com.test_20apr.bmgf_investments.service.*;


/**
 * Controller object for domain model class AttributeCategoryCode.
 * @see com.test_20apr.bmgf_investments.AttributeCategoryCode
 */

@RestController(value = "BMGF_Investments.AttributeCategoryCodeController")
@Api(value = "/BMGF_Investments/AttributeCategoryCode", description = "Exposes APIs to work with AttributeCategoryCode resource.")
@RequestMapping("/BMGF_Investments/AttributeCategoryCode")
public class AttributeCategoryCodeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AttributeCategoryCodeController.class);

	@Autowired
	@Qualifier("BMGF_Investments.AttributeCategoryCodeService")
	private AttributeCategoryCodeService attributeCategoryCodeService;


    @Autowired
    @Qualifier("BMGF_Investments.InvestmentAttributeCodeService")
    private InvestmentAttributeCodeService investmentAttributeCodeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AttributeCategoryCode instances matching the search criteria.")
	public Page<AttributeCategoryCode> findAttributeCategoryCodes( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AttributeCategoryCodes list");
		return attributeCategoryCodeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AttributeCategoryCode instances.")
	public Page<AttributeCategoryCode> getAttributeCategoryCodes(Pageable pageable) {
		LOGGER.debug("Rendering AttributeCategoryCodes list");
		return attributeCategoryCodeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AttributeCategoryCode instances.")
	public Long countAllAttributeCategoryCodes() {
		LOGGER.debug("counting AttributeCategoryCodes");
		Long count = attributeCategoryCodeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AttributeCategoryCode instance associated with the given id.")
    public AttributeCategoryCode getAttributeCategoryCode(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting AttributeCategoryCode with id: {}" , id);
        AttributeCategoryCode instance = attributeCategoryCodeService.findById(id);
        LOGGER.debug("AttributeCategoryCode details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AttributeCategoryCode instance associated with the given id.")
    public boolean deleteAttributeCategoryCode(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AttributeCategoryCode with id: {}" , id);
        AttributeCategoryCode deleted = attributeCategoryCodeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AttributeCategoryCode instance associated with the given id.")
    public AttributeCategoryCode editAttributeCategoryCode(@PathVariable("id") String id, @RequestBody AttributeCategoryCode instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AttributeCategoryCode with id: {}" , instance.getAttributeCategoryCodeId());
        instance.setAttributeCategoryCodeId(id);
        instance = attributeCategoryCodeService.update(instance);
        LOGGER.debug("AttributeCategoryCode details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/investmentAttributeCodes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the investmentAttributeCodes instance associated with the given id.")
     public Page<InvestmentAttributeCode> findAssociatedinvestmentAttributeCodes(Pageable pageable, @PathVariable("id") String id){
        LOGGER.debug("Fetching all associated investmentAttributeCodes");
        return investmentAttributeCodeService.findAssociatedValues(id,"attributeCategoryCode","attributeCategoryCodeId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AttributeCategoryCode instance.")
	public AttributeCategoryCode createAttributeCategoryCode(@RequestBody AttributeCategoryCode instance) {
		LOGGER.debug("Create AttributeCategoryCode with information: {}" , instance);
		instance = attributeCategoryCodeService.create(instance);
		LOGGER.debug("Created AttributeCategoryCode with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAttributeCategoryCodeService(AttributeCategoryCodeService service) {
		this.attributeCategoryCodeService = service;
	}
}

