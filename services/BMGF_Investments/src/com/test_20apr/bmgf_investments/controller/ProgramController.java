/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.test_20apr.bmgf_investments.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_20apr.bmgf_investments.service.AttributeCategoryService;
import com.test_20apr.bmgf_investments.service.InvestmentService;
import com.test_20apr.bmgf_investments.service.ProgramService;
import com.test_20apr.bmgf_investments.service.StrategyService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.test_20apr.bmgf_investments.*;
import com.test_20apr.bmgf_investments.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Program.
 * @see com.test_20apr.bmgf_investments.Program
 */
@RestController(value = "BMGF_Investments.ProgramController")
@RequestMapping("/BMGF_Investments/Program")
@Api(description = "Exposes APIs to work with Program resource.", value = "ProgramController")
public class ProgramController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProgramController.class);

    @Autowired
    @Qualifier("BMGF_Investments.ProgramService")
    private ProgramService programService;

    @Autowired
    @Qualifier("BMGF_Investments.AttributeCategoryService")
    private AttributeCategoryService attributeCategoryService;

    @Autowired
    @Qualifier("BMGF_Investments.StrategyService")
    private StrategyService strategyService;

    @Autowired
    @Qualifier("BMGF_Investments.InvestmentService")
    private InvestmentService investmentService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Program instances matching the search criteria.")
    public Page<Program> findPrograms(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Programs list");
        return programService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Program instances.")
    public Page<Program> getPrograms(Pageable pageable) {
        LOGGER.debug("Rendering Programs list");
        return programService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/strategies", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the strategies instance associated with the given id.")
    public Page<Strategy> findAssociatedstrategies(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated strategies");
        return strategyService.findAssociatedValues(id, "program", "programId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/investments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the investments instance associated with the given id.")
    public Page<Investment> findAssociatedinvestments(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated investments");
        return investmentService.findAssociatedValues(id, "program", "programId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/attributeCategories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the attributeCategories instance associated with the given id.")
    public Page<AttributeCategory> findAssociatedattributeCategories(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated attributeCategories");
        return attributeCategoryService.findAssociatedValues(id, "program", "programId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setProgramService(ProgramService service) {
        this.programService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Program instance.")
    public Program createProgram(@RequestBody Program instance) {
        LOGGER.debug("Create Program with information: {}", instance);
        instance = programService.create(instance);
        LOGGER.debug("Created Program with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Program instances.")
    public Long countAllPrograms() {
        LOGGER.debug("counting Programs");
        Long count = programService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Program instance associated with the given id.")
    public Program getProgram(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Program with id: {}", id);
        Program instance = programService.findById(id);
        LOGGER.debug("Program details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Program instance associated with the given id.")
    public Program editProgram(@PathVariable(value = "id") String id, @RequestBody Program instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Program with id: {}", instance.getProgramId());
        instance.setProgramId(id);
        instance = programService.update(instance);
        LOGGER.debug("Program details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Program instance associated with the given id.")
    public boolean deleteProgram(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Program with id: {}", id);
        Program deleted = programService.delete(id);
        return deleted != null;
    }
}
