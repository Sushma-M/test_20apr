/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.db123testing.*;


/**
 * ServiceImpl object for domain model class TypesSpacing.
 * @see com.test_20apr.db123testing.TypesSpacing
 */
@Service("DB123Testing.TypesSpacingService")
public class TypesSpacingServiceImpl implements TypesSpacingService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypesSpacingServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.TypesSpacingDao")
    private WMGenericDao<TypesSpacing, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypesSpacing, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
     public Page<TypesSpacing> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
    public TypesSpacing create(TypesSpacing typesspacing) {
        LOGGER.debug("Creating a new typesspacing with information: {}" , typesspacing);
        return this.wmGenericDao.create(typesspacing);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
    @Override
    public TypesSpacing delete(Integer typesspacingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typesspacing with id: {}" , typesspacingId);
        TypesSpacing deleted = this.wmGenericDao.findById(typesspacingId);
        if (deleted == null) {
            LOGGER.debug("No typesspacing found with id: {}" , typesspacingId);
            throw new EntityNotFoundException(String.valueOf(typesspacingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<TypesSpacing> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typesspacings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<TypesSpacing> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typesspacings");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public TypesSpacing findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typesspacing by id: {}" , id);
        TypesSpacing typesspacing=this.wmGenericDao.findById(id);
        if(typesspacing==null){
            LOGGER.debug("No typesspacing found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typesspacing;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
    @Override
    public TypesSpacing update(TypesSpacing updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typesspacing with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


