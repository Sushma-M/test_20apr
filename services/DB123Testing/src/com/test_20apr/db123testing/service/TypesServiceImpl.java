/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.db123testing.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.db123testing.*;


/**
 * ServiceImpl object for domain model class Types.
 * @see com.test_20apr.db123testing.Types
 */
@Service("DB123Testing.TypesService")
public class TypesServiceImpl implements TypesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypesServiceImpl.class);

    @Autowired
    @Qualifier("DB123Testing.TypesDao")
    private WMGenericDao<Types, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Types, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
     public Page<Types> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "DB123TestingTransactionManager")
    @Override
    public Types create(Types types) {
        LOGGER.debug("Creating a new types with information: {}" , types);
        return this.wmGenericDao.create(types);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
    @Override
    public Types delete(Integer typesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting types with id: {}" , typesId);
        Types deleted = this.wmGenericDao.findById(typesId);
        if (deleted == null) {
            LOGGER.debug("No types found with id: {}" , typesId);
            throw new EntityNotFoundException(String.valueOf(typesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<Types> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Page<Types> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public Types findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding types by id: {}" , id);
        Types types=this.wmGenericDao.findById(id);
        if(types==null){
            LOGGER.debug("No types found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return types;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB123TestingTransactionManager")
    @Override
    public Types update(Types updated) throws EntityNotFoundException {
        LOGGER.debug("Updating types with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "DB123TestingTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


