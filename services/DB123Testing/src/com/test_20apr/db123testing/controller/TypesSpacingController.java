/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.test_20apr.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_20apr.db123testing.service.TypesSpacingService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.test_20apr.db123testing.*;
import com.test_20apr.db123testing.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypesSpacing.
 * @see com.test_20apr.db123testing.TypesSpacing
 */
@RestController(value = "DB123Testing.TypesSpacingController")
@RequestMapping("/DB123Testing/TypesSpacing")
@Api(description = "Exposes APIs to work with TypesSpacing resource.", value = "TypesSpacingController")
public class TypesSpacingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypesSpacingController.class);

    @Autowired
    @Qualifier("DB123Testing.TypesSpacingService")
    private TypesSpacingService typesSpacingService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypesSpacing instances matching the search criteria.")
    public Page<TypesSpacing> findTypesSpacings(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypesSpacings list");
        return typesSpacingService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypesSpacing instances.")
    public Page<TypesSpacing> getTypesSpacings(Pageable pageable) {
        LOGGER.debug("Rendering TypesSpacings list");
        return typesSpacingService.findAll(pageable);
    }

    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Retrieves content for the given BLOB field in TypesSpacing instance")
    public DownloadResponse getTypesSpacingBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value = "download", defaultValue = "false") boolean download) {
        LOGGER.debug("Retrieves content for the given BLOB field {} in TypesSpacing instance", fieldName);
        if (!WMRuntimeUtils.isLob(TypesSpacing.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        TypesSpacing instance = typesSpacingService.findById(id);
        return WMMultipartUtils.buildDownloadResponseForBlob(instance, fieldName, httpServletRequest, download);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new TypesSpacing instance.")
    public TypesSpacing createTypesSpacing(@RequestBody TypesSpacing instance) {
        LOGGER.debug("Create TypesSpacing with information: {}", instance);
        instance = typesSpacingService.create(instance);
        LOGGER.debug("Created TypesSpacing with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTypesSpacingService(TypesSpacingService service) {
        this.typesSpacingService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST, consumes = { "multipart/form-data" })
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypesSpacing instance.This API should be used when the TypesSpacing instance has fields that requires multipart data.")
    public TypesSpacing createTypesSpacing(MultipartHttpServletRequest multipartHttpServletRequest) {
        TypesSpacing typesspacing = WMMultipartUtils.toObject(multipartHttpServletRequest, TypesSpacing.class, "DB123Testing");
        LOGGER.debug("Creating a new typesspacing with information: {}", typesspacing);
        return typesSpacingService.create(typesspacing);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypesSpacing instances.")
    public Long countAllTypesSpacings() {
        LOGGER.debug("counting TypesSpacings");
        Long count = typesSpacingService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypesSpacing instance associated with the given id.")
    public TypesSpacing getTypesSpacing(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypesSpacing with id: {}", id);
        TypesSpacing instance = typesSpacingService.findById(id);
        LOGGER.debug("TypesSpacing details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypesSpacing instance associated with the given id.")
    public TypesSpacing editTypesSpacing(@PathVariable(value = "id") Integer id, @RequestBody TypesSpacing instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypesSpacing with id: {}", instance.getId());
        instance.setId(id);
        instance = typesSpacingService.update(instance);
        LOGGER.debug("TypesSpacing details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.POST, consumes = { "multipart/form-data" })
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypesSpacing instance associated with the given id.This API should be used when TypesSpacing instance fields that require multipart data.")
    public TypesSpacing editTypesSpacing(@PathVariable(value = "id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        TypesSpacing newtypesspacing = WMMultipartUtils.toObject(multipartHttpServletRequest, TypesSpacing.class, "DB123Testing");
        newtypesspacing.setId(id);
        TypesSpacing oldtypesspacing = typesSpacingService.findById(id);
        WMMultipartUtils.updateLobsContent(oldtypesspacing, newtypesspacing);
        LOGGER.debug("Updating typesspacing with information: {}", newtypesspacing);
        return typesSpacingService.update(newtypesspacing);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypesSpacing instance associated with the given id.")
    public boolean deleteTypesSpacing(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypesSpacing with id: {}", id);
        TypesSpacing deleted = typesSpacingService.delete(id);
        return deleted != null;
    }
}
