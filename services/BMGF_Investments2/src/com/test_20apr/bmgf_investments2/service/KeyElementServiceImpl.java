/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments2.*;


/**
 * ServiceImpl object for domain model class KeyElement.
 * @see com.test_20apr.bmgf_investments2.KeyElement
 */
@Service("BMGF_Investments2.KeyElementService")
public class KeyElementServiceImpl implements KeyElementService {


    private static final Logger LOGGER = LoggerFactory.getLogger(KeyElementServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments2.KeyElementDao")
    private WMGenericDao<KeyElement, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<KeyElement, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
     public Page<KeyElement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BMGF_Investments2TransactionManager")
    @Override
    public KeyElement create(KeyElement keyelement) {
        LOGGER.debug("Creating a new keyelement with information: {}" , keyelement);
        return this.wmGenericDao.create(keyelement);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_Investments2TransactionManager")
    @Override
    public KeyElement delete(String keyelementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting keyelement with id: {}" , keyelementId);
        KeyElement deleted = this.wmGenericDao.findById(keyelementId);
        if (deleted == null) {
            LOGGER.debug("No keyelement found with id: {}" , keyelementId);
            throw new EntityNotFoundException(String.valueOf(keyelementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Page<KeyElement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all keyelements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Page<KeyElement> findAll(Pageable pageable) {
        LOGGER.debug("Finding all keyelements");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public KeyElement findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding keyelement by id: {}" , id);
        KeyElement keyelement=this.wmGenericDao.findById(id);
        if(keyelement==null){
            LOGGER.debug("No keyelement found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return keyelement;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_Investments2TransactionManager")
    @Override
    public KeyElement update(KeyElement updated) throws EntityNotFoundException {
        LOGGER.debug("Updating keyelement with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getKeyElementId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


