/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments2.*;

/**
 * Service object for domain model class SubInitiative.
 * @see com.test_20apr.bmgf_investments2.SubInitiative
 */

public interface SubInitiativeService {
   /**
	 * Creates a new subinitiative.
	 * 
	 * @param created
	 *            The information of the created subinitiative.
	 * @return The created subinitiative.
	 */
	public SubInitiative create(SubInitiative created);

	/**
	 * Deletes a subinitiative.
	 * 
	 * @param subinitiativeId
	 *            The id of the deleted subinitiative.
	 * @return The deleted subinitiative.
	 * @throws EntityNotFoundException
	 *             if no subinitiative is found with the given id.
	 */
	public SubInitiative delete(String subinitiativeId) throws EntityNotFoundException;

	/**
	 * Finds all subinitiatives.
	 * 
	 * @return A list of subinitiatives.
	 */
	public Page<SubInitiative> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SubInitiative> findAll(Pageable pageable);
	
	/**
	 * Finds subinitiative by id.
	 * 
	 * @param id
	 *            The id of the wanted subinitiative.
	 * @return The found subinitiative. If no subinitiative is found, this method returns
	 *         null.
	 */
	public SubInitiative findById(String id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a subinitiative.
	 * 
	 * @param updated
	 *            The information of the updated subinitiative.
	 * @return The updated subinitiative.
	 * @throws EntityNotFoundException
	 *             if no subinitiative is found with given id.
	 */
	public SubInitiative update(SubInitiative updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the subinitiatives in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the subinitiative.
	 */

	public long countAll();


    public Page<SubInitiative> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

