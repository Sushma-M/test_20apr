/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments2.*;


/**
 * ServiceImpl object for domain model class InvestmentAttribute.
 * @see com.test_20apr.bmgf_investments2.InvestmentAttribute
 */
@Service("BMGF_Investments2.InvestmentAttributeService")
public class InvestmentAttributeServiceImpl implements InvestmentAttributeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(InvestmentAttributeServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments2.InvestmentAttributeDao")
    private WMGenericDao<InvestmentAttribute, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InvestmentAttribute, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
     public Page<InvestmentAttribute> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BMGF_Investments2TransactionManager")
    @Override
    public InvestmentAttribute create(InvestmentAttribute investmentattribute) {
        LOGGER.debug("Creating a new investmentattribute with information: {}" , investmentattribute);
        return this.wmGenericDao.create(investmentattribute);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_Investments2TransactionManager")
    @Override
    public InvestmentAttribute delete(String investmentattributeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting investmentattribute with id: {}" , investmentattributeId);
        InvestmentAttribute deleted = this.wmGenericDao.findById(investmentattributeId);
        if (deleted == null) {
            LOGGER.debug("No investmentattribute found with id: {}" , investmentattributeId);
            throw new EntityNotFoundException(String.valueOf(investmentattributeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Page<InvestmentAttribute> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all investmentattributes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Page<InvestmentAttribute> findAll(Pageable pageable) {
        LOGGER.debug("Finding all investmentattributes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public InvestmentAttribute findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding investmentattribute by id: {}" , id);
        InvestmentAttribute investmentattribute=this.wmGenericDao.findById(id);
        if(investmentattribute==null){
            LOGGER.debug("No investmentattribute found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return investmentattribute;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_Investments2TransactionManager")
    @Override
    public InvestmentAttribute update(InvestmentAttribute updated) throws EntityNotFoundException {
        LOGGER.debug("Updating investmentattribute with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getInvestmentAttributeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


