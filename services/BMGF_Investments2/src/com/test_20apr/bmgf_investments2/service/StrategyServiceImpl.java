/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments2.*;


/**
 * ServiceImpl object for domain model class Strategy.
 * @see com.test_20apr.bmgf_investments2.Strategy
 */
@Service("BMGF_Investments2.StrategyService")
public class StrategyServiceImpl implements StrategyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(StrategyServiceImpl.class);

    @Autowired
    @Qualifier("BMGF_Investments2.StrategyDao")
    private WMGenericDao<Strategy, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Strategy, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
     public Page<Strategy> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BMGF_Investments2TransactionManager")
    @Override
    public Strategy create(Strategy strategy) {
        LOGGER.debug("Creating a new strategy with information: {}" , strategy);
        return this.wmGenericDao.create(strategy);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_Investments2TransactionManager")
    @Override
    public Strategy delete(String strategyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting strategy with id: {}" , strategyId);
        Strategy deleted = this.wmGenericDao.findById(strategyId);
        if (deleted == null) {
            LOGGER.debug("No strategy found with id: {}" , strategyId);
            throw new EntityNotFoundException(String.valueOf(strategyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Page<Strategy> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all strategys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Page<Strategy> findAll(Pageable pageable) {
        LOGGER.debug("Finding all strategys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public Strategy findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding strategy by id: {}" , id);
        Strategy strategy=this.wmGenericDao.findById(id);
        if(strategy==null){
            LOGGER.debug("No strategy found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return strategy;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BMGF_Investments2TransactionManager")
    @Override
    public Strategy update(Strategy updated) throws EntityNotFoundException {
        LOGGER.debug("Updating strategy with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getStrategyId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BMGF_Investments2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


