/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments2.*;

/**
 * Service object for domain model class AttributeCategory.
 * @see com.test_20apr.bmgf_investments2.AttributeCategory
 */

public interface AttributeCategoryService {
   /**
	 * Creates a new attributecategory.
	 * 
	 * @param created
	 *            The information of the created attributecategory.
	 * @return The created attributecategory.
	 */
	public AttributeCategory create(AttributeCategory created);

	/**
	 * Deletes a attributecategory.
	 * 
	 * @param attributecategoryId
	 *            The id of the deleted attributecategory.
	 * @return The deleted attributecategory.
	 * @throws EntityNotFoundException
	 *             if no attributecategory is found with the given id.
	 */
	public AttributeCategory delete(String attributecategoryId) throws EntityNotFoundException;

	/**
	 * Finds all attributecategorys.
	 * 
	 * @return A list of attributecategorys.
	 */
	public Page<AttributeCategory> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AttributeCategory> findAll(Pageable pageable);
	
	/**
	 * Finds attributecategory by id.
	 * 
	 * @param id
	 *            The id of the wanted attributecategory.
	 * @return The found attributecategory. If no attributecategory is found, this method returns
	 *         null.
	 */
	public AttributeCategory findById(String id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a attributecategory.
	 * 
	 * @param updated
	 *            The information of the updated attributecategory.
	 * @return The updated attributecategory.
	 * @throws EntityNotFoundException
	 *             if no attributecategory is found with given id.
	 */
	public AttributeCategory update(AttributeCategory updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the attributecategorys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the attributecategory.
	 */

	public long countAll();


    public Page<AttributeCategory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

