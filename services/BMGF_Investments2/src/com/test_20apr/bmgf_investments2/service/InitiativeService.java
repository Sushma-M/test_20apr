/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.test_20apr.bmgf_investments2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_20apr.bmgf_investments2.*;

/**
 * Service object for domain model class Initiative.
 * @see com.test_20apr.bmgf_investments2.Initiative
 */

public interface InitiativeService {
   /**
	 * Creates a new initiative.
	 * 
	 * @param created
	 *            The information of the created initiative.
	 * @return The created initiative.
	 */
	public Initiative create(Initiative created);

	/**
	 * Deletes a initiative.
	 * 
	 * @param initiativeId
	 *            The id of the deleted initiative.
	 * @return The deleted initiative.
	 * @throws EntityNotFoundException
	 *             if no initiative is found with the given id.
	 */
	public Initiative delete(String initiativeId) throws EntityNotFoundException;

	/**
	 * Finds all initiatives.
	 * 
	 * @return A list of initiatives.
	 */
	public Page<Initiative> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Initiative> findAll(Pageable pageable);
	
	/**
	 * Finds initiative by id.
	 * 
	 * @param id
	 *            The id of the wanted initiative.
	 * @return The found initiative. If no initiative is found, this method returns
	 *         null.
	 */
	public Initiative findById(String id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a initiative.
	 * 
	 * @param updated
	 *            The information of the updated initiative.
	 * @return The updated initiative.
	 * @throws EntityNotFoundException
	 *             if no initiative is found with given id.
	 */
	public Initiative update(Initiative updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the initiatives in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the initiative.
	 */

	public long countAll();


    public Page<Initiative> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

